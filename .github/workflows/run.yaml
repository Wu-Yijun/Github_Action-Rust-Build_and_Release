# 手动运行 或 push 到 master 分支时触发
on:
  workflow_dispatch:
    inputs:
      name:
        description: 'Name of the person to greet'
        required: true
        default: 'Mona the Octocat'
  push:
    branches:
      - master

name: Build and Release

jobs:
  get_counter_and_release:
    runs-on: ubuntu-latest
    outputs:
      counter: ${{ steps.get_counter.outputs.counter }}
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      # Get the current counter value from the latest release
      - name: Get current counter
        id: get_counter
        run: |
          counter=$(curl -sL https://api.github.com/repos/${{ github.repository }}/releases/latest | jq -r '.tag_name' | cut -d '.' -f 3)
          echo "::set-output name=counter::$((counter + 1))"
      # Release to github release
      - name: Create release
        id: create_release
        uses: actions/create-release@v1
        with:
          # tag_name: "v1.3.${{ steps.get_counter.outputs.counter }}"
          tag_name: "v1.3.${{ steps.get_counter.outputs.counter }}.${{ github.run_number }}"
          release_name: Release 1.3.${{ steps.get_counter.outputs.counter }}.${{ github.run_number }}
          body: |
            This is release 1.3.${{ steps.get_counter.outputs.counter }}.${{ github.run_number }}.
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build_on_ubunutu:
    needs: get_counter_and_release
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    # Build the project
    - name: Build Project
      run: cargo build --verbose --release
    # List the files in the target/release directory
    - name: List Files
      run: ls -R ./target/release
    # copy and compress the binary and library into a zip file
    - name: Copy and Compress Binary
      run: |
        cd ./target/release
        mkdir -p temp_files/libs
        cp hello-world temp_files/
        cp *.so temp_files/libs/
        cd temp_files
        zip -r ../hello-ubuntu.zip .
        cd ..
        cd ..
        cd ..
    # Test the Rust program
    - name: Run Rust program
      run: |
        ./hello-world
        exit_code=$?
        if [ $exit_code -ne 0 ]; then
          echo "Rust program failed with exit code $exit_code"
          exit 1
        fi
      working-directory: ./target/release/temp_files
    # delete the temp_files directory
    - name: Delete temp_files
      run: |
        rm -rf ./target/release/temp_files
    # then upload the zip to the release
    - name: Upload Release Asset
      id: upload-release-asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.get_counter_and_release.outputs.upload_url }}
        asset_path: ./target/release/hello-ubuntu.zip
        asset_name: hello-ubuntu.zip
        asset_content_type: application/zip

  build_on_windows:
    needs: get_counter_and_release
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v2
    # Build the project
    - name: Build Project
      run: cargo build --verbose --release
    # copy and compress the binary and library into a zip file
    - name: Copy and Compress Binary
      run: |
        cd ./target/release
        mkdir -p hello_windows/libs
        cp hello-world.exe hello_windows/
        cp *.dll hello_windows/libs/
        Compress-Archive -Path "hello_windows" hello-windows.zip
        cd ..
        cd ..
    # Test the Rust program
    - name: Run Rust program
      run: |
        ./hello-world.exe
        $exit_code = $LASTEXITCODE
        if ($exit_code -ne 0) {
          Write-Output "Rust program failed with exit code $exit_code"
          exit 1
        }
      working-directory: ./target/release/hello_windows
    # delete the hello_windows directory
    - name: Delete hello_windows
      run: |
        Remove-Item -Path "./target/release/hello_windows" -Recurse -Force
    # then upload the zip to the release
    - name: Upload Release Asset
      id: upload-release-asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.get_counter_and_release.outputs.upload_url }}
        asset_path: ./target/release/hello-windows.zip
        asset_name: hello-windows.zip
        asset_content_type: application/zip

  build_on_mac:
    needs: get_counter_and_release
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v2
      # Build the project
      - name: Build Project
        run: cargo build --verbose --release
      # List the files in the target/release directory
      - name: List Files
        run: ls -R ./target/release
      # copy and compress the binary and library into a zip file
      - name: Copy and Compress Binary
        run: |
          cd ./target/release
          mkdir -p temp_files/libs
          cp hello-world temp_files/
          cp *.dylib temp_files/libs/  # Assuming dylib for macOS
          cd temp_files
          zip -r ../hello-macos.zip .
          cd ..
          cd ..
          cd ..
      # Test the Rust program
      - name: Run Rust program
        run: |
          ./hello-world
          exit_code=$?
          if [ $exit_code -ne 0 ]; then
            echo "Rust program failed with exit code $exit_code"
            exit 1
          fi
        working-directory: ./target/release/temp_files
      # delete the temp_files directory
      - name: Delete temp_files
        run: |
          rm -rf ./target/release/temp_files
      # then upload the zip to the release
      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.get_counter_and_release.outputs.upload_url }}
          asset_path: ./target/release/hello-macos.zip
          asset_name: hello-macos.zip
          asset_content_type: application/zip

  # Check if all the jobs are successful
  check_success:
    needs: [build_on_ubunutu, build_on_windows, build_on_mac]
    runs-on: ubuntu-latest
    steps:
      - name: Check if all dependencies are successful
        run: |
          if [ ${{ job.status.build_on_ubunutu }} != 'completed' ] || [ ${{ job.status.build_on_windows }} != 'completed' ] || [ ${{ job.status.build_on_mac }} != 'completed' ]; then
            echo "One or more dependencies failed"
            exit 1
          else
            echo "All dependencies succeeded"
          fi