name: Example Workflow # 工作流名称

on: # 定义触发条件
  push: # 当push到main分支时触发
    # branches:
    #   - main
  workflow_dispatch: # 或手动触发
    # inputs: # 定义输入参数列表
    #   name-of-var: # 第一个待输入参数
    #     description: 'Description of this var'
    #     required: true
    #     default: 'default string'
    #   name-of-var-2: # 第二个待输入参数
    #     description: 'Description of this var2'
    #     required: false # 可选参数, 可以不输入

env: # 定义环境变量
  HELLO1: world1

jobs: # 定义工作流
  # echo-hello: # 工作流名称
  #   runs-on: ubuntu-latest # 运行环境
  #   steps: # 步骤
  #     - name: Echo hello # 步骤 1 的步骤名称
  #       # 使用 run 关键字执行 shell 命令
  #       run: echo "Hello, ${{ github.event.inputs.name-of-var }}"
  #     - name: Echo hello 2 # 步骤 2 的步骤名称
  #       # run 关键字后加 | 表示多行命令
  #       run: |
  #         HELLO2="Hello, ${{ github.event.inputs.name-of-var-2 }}"
  #         echo $HELLO2
  #         echo $HELLO2 > hello2.txt
  #     - name: upload-artifact # 步骤 3 的步骤名称
  #       # 使用 uses 关键字引用 actions/upload-artifact@v2 动作
  #       # 这个动作会将 hello2.txt 上传到 GitHub Actions 的 Artifacts
  #       uses: actions/upload-artifact@v4
  #       with: # 输入参数列表
  #         name: hello2
  #         path: hello2.txt

  # 第一项工作
  # env-var-example:
  #   runs-on: ubuntu-latest
  #   # 设置局域环境变量
  #   env: # 定义环境变量
  #     HELLO2: world2
  #   # 设置输出
  #   outputs:
  #     # set-output 步骤的 HELLO5 输出
  #     HELLO7: ${{ steps.set-output.outputs.HELLO5 }}
  #     # set-output 步骤的 HELLO6 输出
  #     HELLO8: ${{ steps.set-output.outputs.HELLO6 }}
  #     # 环境变量 HELLO1 与 world9 拼接而成
  #     HELLO9: "hello $HELLO1"
  #     # set-output 步骤的 HELLO5 输出 与 world10 拼接而成
  #     HELLO10: "${{ steps.set-output.outputs.HELLO5 }}"
  #   steps:
  #     # 设置环境变量
  #     - name: Set env var
  #       run: |
  #         echo "HELLO3=world3" >> $GITHUB_ENV
  #     # 使用环境变量
  #     - name: Echo env var
  #       run: |
  #         echo $HELLO1
  #         echo $HELLO2
  #         echo $HELLO3
  #         echo $HELLO4
  #       # 设置单步环境变量
  #       env:
  #         HELLO4: world4
  #     # 设置单步输出
  #     - name: set-output
  #       # 使用 id 标记名称便于后面的步骤使用这一步的输出
  #       id: set-output
  #       run: |
  #         HELLO5=world5
  #         echo "::set-output name=HELLO5::$HELLO5"
  #         echo "::set-output name=HELLO6::world6"
  #     # 使用单步输出
  #     - name: use-output
  #       run: |
  #         echo ${{ steps.set-output.outputs.HELLO5 }}
  #         echo ${{ steps.set-output.outputs.HELLO6 }}
  #     # 打印 Github 环境变量
  #     - name: Echo github context
  #       run: node -e "console.log(JSON.stringify(process.env, null, 2))"
  #     # 使用 Github 环境变量
  #     - name: use-git-context
  #       run: |
  #         echo "${{ github.repository_owner }}'s repo"
  #         echo ${{ github.event_name }}
  #         echo ${{ github.event.inputs.name-of-var }}
  #         echo ${{ github.event.inputs.name-of-var-2 }}
  #         echo "token = ${{ secrets.GITHUB_TOKEN }}"
  
  # # 第二项工作, 依赖第一项工作
  # use-output:
  #   # 依赖项
  #   needs: env-var-example
  #   runs-on: macos-latest
  #   steps:
  #     # 打印之前步骤的输出
  #     - name: Echo output
  #       run: |
  #         echo ${{ needs.env-var-example.outputs.HELLO7 }}
  #         echo ${{ needs.env-var-example.outputs.HELLO8 }}
  #         echo ${{ needs.env-var-example.outputs.HELLO9 }}
  #         echo ${{ needs.env-var-example.outputs.HELLO10 }}

  run-javascript:
    runs-on: ubuntu-latest
    steps:
      # 获取代码(这样可以运行储存库中你写的代码)
      - uses: actions/checkout@v4
      # 安装 Node
      # 其实这一步可以略去, 没什么影响
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: latest
      # 运行 JS 代码
      - name: Run JavaScript
        id: Run-JavaScript
        run: node ./.github/workflows/example/javascript.js arg1_value arg2_value
        env:
          Env1: value1
          Env2: value2
      # 打印输出
      - name: Echo output of js
        run: |
          echo ${{ steps.Run-JavaScript.outputs.output1 }}
          echo ${{ steps.Run-JavaScript.outputs.output2 }}